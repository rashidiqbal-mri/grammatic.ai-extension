{"version":3,"file":"contentScript.js","mappingssources":["webpack://react-js-chrome-extension/./src/contentScript/contentScript.ts"],"sourcesContent":["function addButtonToTextBoxes() {\n    // Find all input[type='text'], textarea, and contenteditable elements\n    let textBoxes = Array.from(document.querySelectorAll(\"input[type='text'], textarea, [contenteditable='true'], .Am.Al.editable.LW-avf.tS-tW\"));\n    // Additionally, find contenteditable elements inside iframes (e.g., Gmail's email composition box)\n    document.querySelectorAll('iframe').forEach((iframe) => {\n        var _a;\n        try {\n            const innerDoc = iframe.contentDocument || ((_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document);\n            if (innerDoc) {\n                const innerEditableElements = innerDoc.querySelectorAll(\"[contenteditable='true'], .Am.Al.editable.LW-avf.tS-tW\");\n                textBoxes.push(...Array.from(innerEditableElements));\n                console.log(\"joooddndm\");\n            }\n        }\n        catch (error) {\n            // Ignore cross-origin errors\n        }\n    });\n    // Words to underline and their styles\n    const wordsToUnderline = ['rashid', 'cool'];\n    const underlineColors = ['red', 'green'];\n    textBoxes.forEach((textBox) => {\n        let container = document.createElement(\"div\");\n        container.style.position = \"relative\";\n        container.style.display = \"inline-block\";\n        textBox.before(container);\n        container.appendChild(textBox);\n        // Create mirror element for measuring word widths\n        let mirror = document.createElement(\"div\");\n        mirror.style.visibility = \"hidden\";\n        mirror.style.whiteSpace = \"pre-wrap\";\n        mirror.style.position = \"absolute\";\n        mirror.style.top = \"0\";\n        mirror.style.left = \"0\";\n        mirror.style.font = window.getComputedStyle(textBox).font;\n        document.body.appendChild(mirror);\n        // Create overlay for underlines\n        let overlay = document.createElement(\"div\");\n        overlay.style.position = \"absolute\";\n        overlay.style.pointerEvents = \"none\"; // Allow clicks to pass through the overlay\n        overlay.style.width = \"100%\";\n        overlay.style.height = \"100%\";\n        container.appendChild(overlay);\n        // Update underlines\n        const updateUnderlines = () => {\n            overlay.innerHTML = ''; // Clear previous underlines\n            // Get the text content based on the type of element\n            const text = textBox instanceof HTMLElement && textBox.isContentEditable\n                ? textBox.textContent || ''\n                : textBox.value;\n            const words = text.split(' ');\n            let currentPos = 0;\n            words.forEach((word) => {\n                const underlineIndex = wordsToUnderline.indexOf(word);\n                if (underlineIndex !== -1) {\n                    // Measure word width using mirror element\n                    mirror.textContent = word;\n                    const wordWidth = mirror.offsetWidth;\n                    const underline = document.createElement('div');\n                    underline.style.borderBottom = `2px solid ${underlineColors[underlineIndex]}`;\n                    underline.style.position = 'absolute';\n                    underline.style.left = currentPos + 'px';\n                    underline.style.width = wordWidth + 'px';\n                    underline.style.top = 'calc(100% - 45px)';\n                    overlay.appendChild(underline);\n                }\n                // Measure word + space width using mirror element\n                mirror.textContent = word + ' ';\n                currentPos += mirror.offsetWidth;\n            });\n        };\n        textBox.addEventListener('input', updateUnderlines);\n        textBox.addEventListener('keyup', updateUnderlines); // For contenteditable\n        updateUnderlines(); // Initial update of underlines\n        // Create the button\n        let button = document.createElement(\"button\");\n        button.innerText = \"RI\";\n        button.style.backgroundColor = \"teal\";\n        button.style.position = \"absolute\";\n        button.style.borderRadius = \"100%\";\n        button.style.padding = \"0.5em\";\n        button.style.border = \"none\";\n        button.style.color = \"#fff\";\n        button.style.bottom = \"2px\";\n        button.style.right = \"2px\";\n        container.appendChild(button);\n        // Variable to store the menu container element\n        let menuContainer = null;\n        button.addEventListener(\"click\", (event) => {\n            event.preventDefault(); // prevent form submission\n            const buttonRect = button.getBoundingClientRect();\n            const buttonCoordinates = {\n                x: buttonRect.x + window.scrollX,\n                y: buttonRect.y + window.scrollY,\n            };\n            // Check if the menu is already open\n            if (menuContainer) {\n                // If the menu is open, close it and set menuContainer to null\n                menuContainer.remove();\n                menuContainer = null;\n            }\n            else {\n                // If the menu is not open, create the menu container element\n                menuContainer = document.createElement('div');\n                menuContainer.style.position = 'absolute';\n                menuContainer.style.top = buttonRect.y + buttonRect.height + window.scrollY + 'px';\n                menuContainer.style.left = buttonRect.x + window.scrollX + 'px';\n                menuContainer.style.zIndex = '9999'; // ensure the menu is on top\n                // Append the menu container to the body\n                document.body.appendChild(menuContainer);\n                // Inject the menu component into the menu container\n                menuContainer.innerHTML = `\n      <iframe\n        src=\"${chrome.runtime.getURL('menu.html')}\"\n        style=\"border: none; width: 400px; height: 300px;\"\n      ></iframe>\n    `;\n            }\n        });\n        textBox.addEventListener(\"focus\", () => {\n            button.style.display = \"inline-block\";\n        });\n    });\n}\naddButtonToTextBoxes();\n// Send a message to the background script with the selected text\nfunction copySelectedTextToBackground() {\n    const activeElement = document.activeElement;\n    if (activeElement instanceof HTMLInputElement || activeElement instanceof HTMLTextAreaElement) {\n        const selectedText = activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd);\n        if (selectedText) {\n            chrome.runtime.sendMessage({ type: 'selectedText', text: selectedText });\n        }\n    }\n}\ndocument.addEventListener('mouseup', copySelectedTextToBackground);\ndocument.addEventListener('keyup', copySelectedTextToBackground);\n// Send a message to the background script with the textbox text\nfunction copyTextboxTextToBackground() {\n    const activeElement = document.activeElement;\n    if (activeElement instanceof HTMLInputElement || activeElement instanceof HTMLTextAreaElement) {\n        const textboxText = activeElement.value;\n        if (textboxText) {\n            chrome.runtime.sendMessage({ type: 'textboxText', text: textboxText });\n        }\n    }\n}\ndocument.addEventListener('focusin', copyTextboxTextToBackground);\ndocument.addEventListener('input', copyTextboxTextToBackground);\ndocument.addEventListener('mouseup', copyTextboxTextToBackground);\ndocument.addEventListener('keyup', copyTextboxTextToBackground);\n"],"names":[],"sourceRoot":""}